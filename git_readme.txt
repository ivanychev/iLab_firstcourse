/*
 *	@file		git_readme.txt
 *	@author		Sergey Ivanychev
 *	
 *	@version	1.0
 *	
 *	@par		Описание работы с Git
 *
 */


1. Учим английский язык

2. Учим английский язык

3. Качаем Git отсюда

http://git-scm.com/

для Windows и Linux. В случае Debian форков можно установить прямо из консоли используя

#> sudo apt-get update
#> sudo apt-get install git

4. Git - это одна из самых распространенных систем контроля версий. Более подробно о ней можно прочитать на на сайте, указанном выше. Если вкратце, то эта штука позволяет одному человеку или коллективу совместно работать над одним и тем же проектом.

Мы будем использовать Git для того, чтобы я мог эффективно проверять ваши работы, публикуя соответственные комментарии на github. Для того, понять, как это работает, давайте сразу возьмемся за дело.

5. Пусть вы установили Git. Зайдем на bitbucket на веб-страницу с нашим репозиторием

https://bitbucket.org/kharldmitr/ilab_2014_1st_course

Обратите внимание, в правом верхнем углу страницы мы видим web-адрес на удаленную копию репозитория, с которым мы будем работать, скопируем его.

6. Открываем Git (Git Bash на Windows). В Windows вы будете по умолчанию находиться в папке своего пользователя. В Linux, разумеется, вы будете все еще находиться в директории, из которой запустили программу. Обратим внимание, что на Linux непосредственного запуска Git не требуется, так как в этой ОС нам нужны будут ее команды. Откроем ту директорию, в которой вы хотите разместить ПАПКУ с репозиторием.

7. #> git clone <bitbucket url>

Репозиторий будет скопирован в текущую директорию, появится каталог со всем содержимым репо, в том числе с этим файлом.

8. Понятно, что данным репозиторием пользуются несколько человек, в том числе и я. После того, как вы склонировали репо, он может через какое-то время измениться. Для того, чтобы обновить содержимое репозитория, нужно в папке с репозиторием исполнить команду

#> git pull

Git автоматически подгрузит изменение, произошедшие за время, прошедшее с прошлого обновления. ВАЖНО: всегда делайте PULL перед изменением локальной копии репозитория, так как вы обязаны работать с последней версией репо, расположенной на удаленном сервере.

9.Одной из основных концепций Git являются так называемые commit (коммиты или "снепшоты").

Обратите внимание на то, что, если вы зайдете на вкладку "коммиты" веб-интерфейса bitbucket

https://bitbucket.org/kharldmitr/ilab_2014_1st_course/commits/all

Она будет представлять собой дерево изменений данного репозитория. Таким образом, изменение содержимого репозитория происходит от коммита к коммиту. Это сделано для того, что в случае некоторой неполадки в данном коммите (В НАШЕМ СЛУЧАЕ ТАК ДЕЛАТЬ НЕ НАДО, ПЖЛСТ) можно сделать возврат к некоторому предыдущему. Поэтому данная система и называется "системой контроля версий", так как изменив состояние репозитория, вы всегда можете вернуться к некоторой предыдущей.

9.1 Обратите внимание на то, что я рассказываю лишь о 0.1% возможностей данной программы, об остальных фичах вы всегда можете прочитать на 

http://goo.gl/v4rHyM
http://goo.gl/QXW6o1

10. Пусть в папке репозитория вы совершили некоторые изменения в своей папке.

#> git pull

Обновили содержимое папки

#>git commit -m 'Description of commit'

В данном случае вы создаете новый коммит, то есть провозглашаете изменение репозитория, если можно так сказать. Если вы запустите данную команду без описания и без ключа -m, то откроется текстовый редактор по умолчанию, где вы будете обязаны ввести описание коммита. Не брезгуйте!

#>git push

Пушаем изменения на удаленный сервем. Бэм! Проверяем bitbucket, там появился ваш коммит, который я и остальные участники репо смогут прокомментировать или проследить изменения.

P.S.

Если вы дочитали до сюда, то я очень рад этому, так как я совершенно забыл сказать, что при установке Gitа на свой компьютер необходимо ввести свое имя и электронную почту по умолчанию. Эта информация будет приклеена к каждому вашему коммиту

git config --global user.name = "Ivan Ivanov"
git config --global user.email = "ivanov@gmail.com"

P.P.S.

Более подробную информацию о командах Git вы сможете найти здесь

#> git --help
#> git <комманда> --help

И будет вам счастье!